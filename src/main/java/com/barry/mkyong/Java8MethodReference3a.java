package com.barry.mkyong;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.function.BiFunction;

public class Java8MethodReference3a {

    public static void main(String[] args) {

        Invoice obj = new Invoice("A001", BigDecimal.valueOf(1.99), 3);

        InvoiceCalculator formula = new InvoiceCalculator();
        System.out.println("Promotion: "+formula.promotion(obj));
        System.out.println("Normal: "+formula.normal(obj));

        BigDecimal result = calculate(formula, obj, (f, o) -> f.normal(o));         // 5.97

        // method reference
        BigDecimal result2 = calculate(formula, obj, InvoiceCalculator::normal);    // 5.97

        // lambda
        BigDecimal result3 = calculate(formula, obj, (f, o) -> f.promotion(o));     // 5.37

        // method reference
        BigDecimal result4 = calculate(formula, obj, InvoiceCalculator::promotion);

    }

    static BigDecimal calculate(InvoiceCalculator formula, Invoice s1,BiFunction<InvoiceCalculator, Invoice, BigDecimal> func) {
        return func.apply(formula, s1);
    }


    static class InvoiceCalculator {

        public BigDecimal normal(Invoice obj) {
            return obj.getUnitPrice().multiply(BigDecimal.valueOf(obj.qty));
        }

        public BigDecimal promotion(Invoice obj) {
            return obj.getUnitPrice()
                    .multiply(BigDecimal.valueOf(obj.qty))
                    .multiply(BigDecimal.valueOf(0.9))
                    .setScale(2, RoundingMode.HALF_UP);
        }
    }


    @Data @AllArgsConstructor @ToString @NoArgsConstructor
    static class Invoice {

        String no;
        BigDecimal unitPrice;
        Integer qty;

        // generated by IDE, setters, getters, constructor, toString
    }

}
